#!/bin/bash

#set cleanscript $var_path/clean.sh
#set defaultarch  amd64
#set postmirror_script $var_path/postmirror.sh
#set run_postmirror 0

##
############## end config ##############
#
##deb http://archive.ubuntu.com/ubuntu artful main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-security main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-updates main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-proposed main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-backports main restricted universe multiverse
#
##deb-src http://archive.ubuntu.com/ubuntu artful main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-security main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-updates main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-proposed main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-backports main restricted universe multiverse
#
##clean http://archive.ubuntu.com/ubuntu
CONFIG="
set base_path    /tmp
set mirror_path  $base_path/mirror-bionic
set skel_path    $mirror_path/skel
set var_path     $mirror_path/var
set nthreads     20
set _tilde 0
set _autoclean 1

deb-i386 http://lliurex.net/bionic bionic main/debian-installer
deb-amd64 http://lliurex.net/bionic bionic main/debian-installer
deb-i386 http://lliurex.net/bionic bionic-updates main/debian-installer
deb-amd64 http://lliurex.net/bionic bionic-updates main/debian-installer
deb-i386 http://lliurex.net/bionic bionic-security main/debian-installer
deb-amd64 http://lliurex.net/bionic bionic-security main/debian-installer
clean http://lliurex.net/bionic
"

# MIRRORDIR=/tmp/mirror-bionic
# ALLDIR=$MIRRORDIR/var/ALL
# SIGFILES="MD5 SHA1 SHA256"
# SIGDIR=$MIRRORDIR/var
# KEYRING=/etc/apt/trusted.gpg.d/lliurex-archive-keyring-gpg.gpg
# KEYRINGS=$(find /etc/apt -type f -name '*.gpg')

help(){
    echo 'domirror: lliurex-mirror helper tool'
    echo ''
    echo 'available options:'
    echo '      --config-file=  (optional) (use a config file, default /etc/apt/mirror.list)'
    echo '      -i              (always used) (interactive mode)'
    echo '      -e              (always used) (execute)'
    echo '      -v              (optional) (verify downloaded files)'
    echo '      -rf             (optional) (retry failed files)'
    echo '      -c              (optional) (incremental pool & failed)'
}

ME=$$

interactive=1   # default use interactive
execute=1       # default execute
incremental=
verify=
retry_failed=
config_file=

while test -n "$1"; do
    case $1 in
        --config-file=*)
            config_file=$(echo $1|sed -r "s/--config-file=(.*)/\1/g")
        ;;
        -i)
            interactive=1
        ;;
        -e)
            execute=1
        ;;
        -v)
            verify=1
        ;;
        -rf)
            retry_failed=1
        ;;
        -c)
            incremental=1
        ;;
        -h|--help)
            help
            exit 0
        ;;
    esac
    shift;
done

config_used=
if [ ! $config_file ]; then
    if [ -f /etc/apt/mirror.list ]; then
        config_used=/etc/apt/mirror.list
    else
        echo "No config file found"
        exit 1
    fi
else
    if [ -f $config_file ];then
        config_used=$config_file
    else
        echo "Provided config file not found"
        exit 1
    fi
fi

MIRROR_DIR=$(cat $config_used |sed -r '/\s*\S+\s+base_path\s+\S+/!d'|sed -r 's@\s*\S+\s+\S+\s+(\S+)@\1@g')
if [ -z "$MIRROR_DIR" ];then
    echo "Unable to read MIRROR_DIR"
    exit 1
fi
if [ ! -d $MIRROR_DIR ]; then
    mkdir -p $MIRROR_DIR
fi
VAR_DIR=$(cat $config_used |sed -r '/\s*\S+\s+var_path\s+\S+/!d'|sed -r 's@\s*\S+\s+\S+\s+(\S+)@\1@g'|sed "s@\$base_path@$MIRROR_DIR@g")
if [ ! -d $VAR_DIR ]; then
    mkdir -p $VAR_DIR
fi
ALL_FILE=$VAR_DIR/ALL
SIG_DIR=$VAR_DIR
# DEFAULT FILE CHECKING METHOD
SIGFILES="MD5"
KEYRING=/etc/apt/trusted.gpg.d/lliurex-archive-keyring-gpg.gpg
KEYRINGS=$(find /etc/apt -type f -name '*.gpg')
OLD_DIR=$MIRROR_DIR/old
if [ -n "$incremental" ];then
    mkdir -p $OLD_DIR
fi

make_temps(){
    TMP_CURRENT="$(mktemp)"
    TMP_ALL="$(mktemp)"
}
make_temps

trap badthings SIGINT
trap badthings SIGUSR1

badthings(){
    echo Killing $SON
    for x in $gets; do 
        kill -9 $x &> /dev/null
    done
    kill -9 $pid &> /dev/null
    kill -9 $ME &> /dev/null
}

run(){
    if [ $config_file ];then
        $(cat $config_file|apt-mirror &>/dev/null &)
    else
        $(apt-mirror &>/dev/null &)
    fi
    pid=$(pgrep -P $ME||true)
}

getpids(){
    pid=$(pgrep -f apt-mirror||true)
    if [ -n "$pid" ];then
        gets=$(pgrep -P $pid -f wget||true)
    else
        gets=""
    fi
}

make_link(){
    if [ -d "$MIRROR_DIR/pool" -a ! -L "$MIRROR_DIR/pool" ]; then
        mkdir -p $MIRROR_DIR/lliurex.net/bionic
        mv $MIRROR_DIR/pool $MIRROR_DIR/lliurex.net/bionic
    fi
    if [ ! -L "$MIRROR_DIR/pool" ];then
        POOL=$(find $MIRROR_DIR -type d -not -path '*/skel/*' -name 'pool')
        if [ -n "$POOL" ]; then
            if [ "$(echo $POOL|tr '\n' ' '| wc -w)" -gt 1 ];then
                POOL=$(echo $POOL|tr '\n' ' '|tr ' ' '\n'|grep lliurex)
            fi
            ln -s lliurex.net/bionic/pool $MIRROR_DIR/pool
            # Absolute link
            # ln -s $POOL $MIRROR_DIR/pool
        fi
    fi
    if [ -d "$MIRROR_DIR/dists" -a ! -L "$MIRROR_DIR/dists" ];then
        mv $MIRROR_DIR/dists $MIRROR_DIR/old_dists
    fi
    if [ ! -L "$MIRROR_DIR/dists" ];then
        DISTS=$(find $MIRROR_DIR -type d -not -path '*/skel/*' -name 'dists')
        if [ -n "$DISTS" ]; then
            if [ "$(echo $DISTS|tr '\n' ' '|wc -w)" -gt 1 ];then
                DISTS=$(echo $DISTS|tr '\n' ' '|tr ' ' '\n'|grep lliurex)
            fi
            ln -s skel/lliurex.net/bionic/dists $MIRROR_DIR/dists
            # Absolute link
            # ln -s $DISTS $MIRROR_DIR/dists
        fi
    fi
}

OLD_PERCENT=0
calcule(){
    if [ -z "$TMP_CURRENT" -o -z "$TMP_ALL" ];then
        make_temps
    fi
    if [ -f $ALL_FILE ]; then
        retry=2
        while [ $retry -gt 0 ]; do
            asize1=$(echo $(ls -s /net/mirror/llx19/var/ALL |cut -d/ -f1))
            sleep 1
            asize2=$(echo $(ls -s /net/mirror/llx19/var/ALL |cut -d/ -f1))
            retry=$(($retry-1))
        done
        if [ "x$asize1" != "x$asize2" ]; then
            return $OLD_PERCENT
        fi
        cat $ALL_FILE |sort|uniq > $TMP_ALL
        if [ -n "$incremental" ]; then
            find $MIRROR_DIR -type f \( -not -path '*/old/*' -not -path '*/var/*' -not -path '*/skel/*' -not -path '*/dists/*' \) -print |grep -v time-of-last-update|sed -E 's@.*(lliurex\.net)(.*)@\1\2@'|sort|uniq > $TMP_CURRENT
            old=$(comm -23 $TMP_CURRENT $TMP_ALL)
            if [ -n "$old" ];then
                for x in $old; do
                    dn=$(dirname $x)
                    bn=$(basename $x)
                    mkdir -p $OLD_DIR/$dn
                    mv $MIRROR_DIR/$x $OLD_DIR/$dn/$bn
                done
            fi
        fi
        find $MIRROR_DIR -type f \( -not -path '*/old/*' -not -path '*/var/*' -not -path '*/skel/*' -not -path '*/dists/*' \) -print |grep -v time-of-last-update|sort|sed -E 's@.*(lliurex\.net)(.*)@\1\2@' > $TMP_CURRENT
        ncurrent=$(cat $TMP_CURRENT|sort|uniq|wc -l)
        nall=$(cat $TMP_ALL|sort|uniq|wc -l)
        if [ -n "$nall" -a -n "$ncurrent" -a $ncurrent -gt 0 -a $nall -ge $ncurrent ]; then
            percent=$(echo $ncurrent*100/$nall|bc -q)
            make_link;
            OLD_PERCENT=$percent
            return $percent
        else
            return 0
        fi
    else
        return 0
    fi
}

if [ $execute ]; then
    echo Starting apt-mirror
    run
fi

getpids
calcule
printf "[%3s%%]\n" "$?"

if [ $interactive -a $execute ]; then
    while [ -n "$pid" ]; do
        sleep 1
        calcule
        printf "[%3s%%]\n" "$?"
        getpids
    done;
fi

if [ $verify ]; then
    echo "Verifying mirror"
    find $MIRROR_DIR -type f -name InRelease \( -not -path '*/var/*' -not -path '*/skel/*' \) | while read file; do
        valid=0
        for kring in $KEYRINGS; do
            if gpg --keyring $kring --verify $file  &> /dev/null; then
                valid=1
            fi
        done;
        if [ ! $valid ];then
            echo "Failed file verification $file"
        fi
    done;
    ret1=
    ret2=
    ret3=
    for t in $SIGFILES; do
        case $t in
            SHA1)
                ret1=$(cd $MIRROR_DIR;LANG=C sha1sum --quiet -c $MIRROR_DIR/var/$t 2>/dev/null|sed -E 's/([^:]+):\s+FAILED/\1/g')
            ;;
            SHA256)
                ret2=$(cd $MIRROR_DIR;LANG=C sha256sum --quiet -c $MIRROR_DIR/var/$t 2>/dev/null|sed -E 's/([^:]+):\s+FAILED/\1/g')
            ;;
            MD5)
                ret3=$(cd $MIRROR_DIR;LANG=C md5sum --quiet -c $MIRROR_DIR/var/$t 2>/dev/null|sed -E 's/([^:]+):\s+FAILED/\1/g')
            ;;
        esac
    done
    failed=$(printf "%s\n%s\n%s\n" "$ret1" "$ret2" "$ret3"|sort|uniq|xargs -n1)
    nfailed=$(echo $failed|wc -l)
    q=0
    if [ ! $retry_failed ];then
        while [ $q -eq 0 ]; do
            echo -n "$nfailed files failed md5sum, [R|r]etry [S|s]how [C|c]ontinue ?"
            read x;
            case $x in
                s|S)
                    echo $failed
                ;;
                r|R)
                    q=1
                ;;
                c|C)
                    q=2
                ;;
            esac
        done
    fi
    if [ $q -eq 1 -o ! -z "$retry_failed" ];then
        echo "Retrying some packages"
        if [ $(echo $ret1|wc -c) -gt 1 -o $(echo $ret2|wc -c) -gt 1  -o $(echo $ret3|wc -c) -gt 1 ];then
            nretry=0
            for x in $ret1; do
                if [ -f "$MIRROR_DIR/$x" ];then
                    if [ -n "$incremental" ];then
                        mv $MIRROR_DIR/$x $MIRROR_DIR/$x.failed
                    else
                        rm $MIRROR_DIR/$x
                    fi
                    nretry=$(($nretry+1))
                fi
            done
            for x in $ret2; do
                if [ -f "$MIRROR_DIR/$x" ];then
                    if [ -n "$incremental" ];then
                        mv $MIRROR_DIR/$x $MIRROR_DIR/$x.failed
                    else
                        rm $MIRROR_DIR/$x
                    fi
                    nretry=$(($nretry+1))
                fi
            done
            for x in $ret3; do
                if [ -f "$MIRROR_DIR/$x" ];then
                    if [ -n "$incremental" ];then
                        mv $MIRROR_DIR/$x $MIRROR_DIR/$x.failed
                    else
                        rm $MIRROR_DIR/$x
                    fi
                    nretry=$(($nretry+1))
                fi
            done
            echo $nretry files for redownload
            if [ -f $TMP_CURRENT ]; then
                rm $TMP_CURRENT
            fi
            if [ -f $TMP_ALL ]; then
                rm $TMP_ALL
            fi
            exec bash $0 --config-file=$config_used
        fi
    fi
fi
echo "End apt-mirror"
if [ -f $TMP_CURRENT ]; then
    rm $TMP_CURRENT
fi
if [ -f $TMP_ALL ]; then
    rm $TMP_ALL
fi
