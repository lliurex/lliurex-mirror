#!/bin/bash

DISTRO='bionic'
#set cleanscript $var_path/clean.sh
#set defaultarch  amd64
#set postmirror_script $var_path/postmirror.sh
#set run_postmirror 0

##
############## end config ##############
#
##deb http://archive.ubuntu.com/ubuntu artful main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-security main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-updates main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-proposed main restricted universe multiverse
##deb http://archive.ubuntu.com/ubuntu artful-backports main restricted universe multiverse
#
##deb-src http://archive.ubuntu.com/ubuntu artful main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-security main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-updates main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-proposed main restricted universe multiverse
##deb-src http://archive.ubuntu.com/ubuntu artful-backports main restricted universe multiverse
#
##clean http://archive.ubuntu.com/ubuntu
CONFIG="
set base_path    /tmp
set mirror_path  $base_path/mirror-$DISTRO
set skel_path    $mirror_path/skel
set var_path     $mirror_path/var
set nthreads     20
set _tilde 0
set _autoclean 1

deb-i386 http://lliurex.net/$DISTRO $DISTRO main/debian-installer
deb-amd64 http://lliurex.net/$DISTRO $DISTRO main/debian-installer
deb-i386 http://lliurex.net/$DISTRO $DISTRO-updates main/debian-installer
deb-amd64 http://lliurex.net/$DISTRO $DISTRO-updates main/debian-installer
deb-i386 http://lliurex.net/$DISTRO $DISTRO-security main/debian-installer
deb-amd64 http://lliurex.net/$DISTRO $DISTRO-security main/debian-installer
clean http://lliurex.net/$DISTRO
"

# MIRRORDIR=/tmp/mirror-$DISTRO
# ALLDIR=$MIRRORDIR/var/ALL
# SIGFILES="MD5 SHA1 SHA256"
# SIGDIR=$MIRRORDIR/var
# KEYRING=/etc/apt/trusted.gpg.d/lliurex-archive-keyring-gpg.gpg
# KEYRINGS=$(find /etc/apt -type f -name '*.gpg')

help(){
    echo 'domirror: lliurex-mirror helper tool'
    echo ''
    echo 'available options:'
    echo '      --config-file=  (optional) (use a config file, default /etc/apt/mirror.list)'
    echo '      -i              (always used) (interactive mode)'
    echo '      -e              (always used) (execute)'
    echo '      -f              (optional) (remove possibly mirror lockfiles)'
    echo '      -v              (optional) (verify downloaded files)'
    echo '      -rf             (optional) (retry failed files)'
    echo '      -c              (optional) (incremental pool & failed)'
}

ME=$$

interactive=1   # default use interactive
execute=1       # default execute
incremental=
verify=
retry_failed=
config_file=
remove_locks=

while test -n "$1"; do
    case $1 in
        --config-file=*)
            config_file=$(echo $1|sed -r "s/--config-file=(.*)/\1/g")
        ;;
        -i)
            interactive=1
        ;;
        -e)
            execute=1
        ;;
        -v)
            verify=1
        ;;
        -rf)
            retry_failed=1
        ;;
        -c)
            incremental=1
        ;;
        -f)
            remove_locks=1
        ;;
        -h|--help)
            help
            exit 0
        ;;
    esac
    shift;
done

config_used=
if [ -z "$config_file" ]; then
    if [ -f /etc/apt/mirror.list ]; then
        config_used=/etc/apt/mirror.list
    else
        echo "No config file found"
        exit 1
    fi
else
    if [ -f "$config_file" ];then
        config_used="$config_file"
    else
        echo "Provided config file not found"
        exit 1
    fi
fi
REALPATH=$(which realpath)
if [ -z "${REALPATH}" -o ! -f "$REALPATH" ];then
    echo "Realpath not found, install coreutils first!, unable to continue"
    exit 1
fi
COMM=$(which comm)
if [ -z "${COMM}" -o ! -f "$COMM" ];then
    echo "Comm not found, install coreutils first!, unable to continue"
    exit 1
fi
DIRNAME=$(which dirname)
if [ -z "${DIRNAME}" -o ! -f "$DIRNAME" ];then
    echo "dirname not found, install coreutils first!, unable to continue"
    exit 1
fi
BASENAME=$(which basename)
if [ -z "${BASENAME}" -o ! -f "$BASENAME" ];then
    echo "Basename not found, install coreutils first!, unable to continue"
    exit 1
fi
MKTEMP=$(which mktemp)
if [ -z "${MKTEMP}" -o ! -f "$MKTEMP" ];then
    echo "mktemp not found, install coreutils first!, unable to continue"
    exit 1
fi
APTMIRROR=$(which apt-mirror)
if [ -z "${APTMIRROR}" -o ! -f "$APTMIRROR" ];then
    echo "apt-mirror not found, install apt-mirror first!, unable to continue"
    exit 1
fi
PGREP=$(which pgrep)
if [ -z "${PGREP}" -o ! -f "$PGREP" ];then
    echo "pgrep not found, install procps first!, unable to continue"
    exit 1
fi
GPG=$(which gpg)
if [ -z "${GPG}" -o ! -f "$GPG" ];then
    echo "gpg not found, install gpg first!, unable to continue"
    exit 1
fi
PERL=$(which perl)
if [ -z "${PERL}" -o ! -f "$PERL" ];then
    echo "perl not found, install perl first!, unable to continue"
    exit 1
fi
SED=$(which sed)
if [ -z "${SED}" -o ! -f "$SED" ];then
    echo "sed not found, install sed first!, unable to continue"
    exit 1
fi
MIRROR_DIR="$($SED -r "/\s*\S+\s+base_path\s+\S+/!d; s@\s*\S+\s+\S+\s+(\S+)@\1@g" "$config_used")"
MIRROR_DIR=$(echo $MIRROR_DIR | tr -d "\"'")
if [ -z "$MIRROR_DIR" ];then
    echo "Unable to read MIRROR_DIR"
    exit 1
fi
if [ ! -d "$MIRROR_DIR" ]; then
    mkdir -p $MIRROR_DIR
fi
MIRROR_DIR=$($REALPATH "$MIRROR_DIR")
VAR_DIR="$($SED -r "/\s*\S+\s+var_path\s+\S+/!d; s@\s*\S+\s+\S+\s+(\S+)@\1@g; s@\\\$base_path@$MIRROR_DIR@g" "$config_used")"
if [ ! -d "$VAR_DIR" ]; then
    mkdir -p "$VAR_DIR"
fi
ALL_FILE="$VAR_DIR/ALL"
SIG_DIR="$VAR_DIR"
LOCKFILE="$VAR_DIR/apt-mirror.lock"
# DEFAULT FILE CHECKING METHOD
SIGFILES="MD5"
KEYRING=/etc/apt/trusted.gpg.d/lliurex-archive-keyring-gpg.gpg
KEYRINGS=$(find /etc/apt -type f -name '*.gpg')
OLD_DIR="$MIRROR_DIR/old"
if [ -n "$incremental" ];then
    mkdir -p "$OLD_DIR"
fi
if [ -n "$remove_locks" ];then
   if [ -f "$LOCKFILE" ];then
       rm -f "$LOCKFILE"
   fi
fi
make_temps(){
    TMP_CURRENT="$($MKTEMP)"
    TMP_ALL="$($MKTEMP)"
    TMP_STATUS="$($MKTEMP)"
}
make_temps

trap badthings SIGINT
trap badthings SIGUSR1

badthings(){
    echo Killing $SON
    if [ -z "$gets" ]; then
        echo Nothing to kill
        return
    fi
    for x in $gets; do 
        kill -9 $x &> /dev/null
    done
    kill -9 $pid &> /dev/null
    kill -9 $ME &> /dev/null
}

run(){
    make_link
    if [ -n "$config_file" ];then
        $(nice -n5 $APTMIRROR "$config_file" >/dev/null 2>$TMP_STATUS &)
    else
        $(nice -n5 $APTMIRROR >/dev/null 2>$TMP_STATUS &)
    fi
    pid=$($PGREP -P $ME||true)
}

getpids(){
    pid=$($PGREP -f "$PERL $APTMIRROR"||true)
    gets=""
    if [ -n "$pid" ];then
        for p in $pid; do       
            gets="$gets $($PGREP -P $pid -f wget||true)"
        done;
    fi;
}

make_link(){
    if [ -d "$MIRROR_DIR/pool" -a ! -L "$MIRROR_DIR/pool" ]; then
        mkdir -p "$MIRROR_DIR/lliurex.net/$DISTRO"
        mv "$MIRROR_DIR/pool" "$MIRROR_DIR/lliurex.net/$DISTRO"
    fi
    if [ ! -L "$MIRROR_DIR/pool" ];then
        POOL=$(find "$MIRROR_DIR" -type d -not -path '*/skel/*' -name 'pool' -print)
        if [ -n "$POOL" ]; then
            if [ "$(echo "$POOL"|tr '\n' ' '| wc -w)" -gt 1 ];then
                POOL=$(echo "$POOL"|tr '\n' ' '|tr ' ' '\n'|grep lliurex)
            fi
            rp="$($REALPATH --relative-to="$MIRROR_DIR" "$POOL")"
            if [ -n "$rp" ];then
                ln -s "$rp" "$MIRROR_DIR/pool"
            fi
        fi
    fi
    if [ -d "$MIRROR_DIR/dists" -a ! -L "$MIRROR_DIR/dists" ];then
        mv "$MIRROR_DIR/dists" "$MIRROR_DIR/old_dists"
    fi
    if [ ! -L "$MIRROR_DIR/dists" ];then
        DISTS=$(find "$MIRROR_DIR" -type d -path '*/skel/*' -name 'dists' -print)
        if [ -n "$DISTS" ]; then
            if [ "$(echo "$DISTS"|tr '\n' ' '|wc -w)" -gt 1 ];then
                DISTS=$(echo "$DISTS"|tr '\n' ' '|tr ' ' '\n'|grep lliurex)
            fi
            rp="$($REALPATH --relative-to="$MIRROR_DIR" "$DISTS")"
            if [ -n "$rp" ];then
                ln -s "$rp" "$MIRROR_DIR/dists"
            fi
        fi
    fi
}

OLD_PERCENT=0
calcule(){
    if [ -z "$TMP_CURRENT" -o -z "$TMP_ALL" ];then
        make_temps
    fi
    if [ -f "$ALL_FILE" ]; then
        retry=2
        while [ $retry -gt 0 ]; do
            asize1=$(echo $(ls -s "$ALL_FILE" |cut -d/ -f1))
            sleep 2
            asize2=$(echo $(ls -s "$ALL_FILE" |cut -d/ -f1))
            if [ -n "$asize1" -a "x$asize1" == "x$asize2" ]; then 
                break
            fi
            retry=$(($retry-1))
        done
        if [ -n "$asize1" -a "x$asize1" != "x$asize2" ]; then
            return $OLD_PERCENT
        fi
        cat "$ALL_FILE" |sort|uniq > $TMP_ALL
        first_dir=$(head -1 "$ALL_FILE" | cut -d'/' -f1)
        find "$MIRROR_DIR" -type f \( \( -iname '*.deb' -or -iname '*.udeb' \) -not -path '*/old/*' -not -path '*/var/*' -not -path '*/skel/*' -not -path '*/dists/*' \) -print |grep -v time-of-last-update|sed -rn "s@^$MIRROR_DIR/($first_dir)(.*)@\1\2@p;"|sort|uniq > $TMP_CURRENT
        declare -a old
        readarray -d $'\0' old < <($COMM -23 $TMP_CURRENT $TMP_ALL|tr '\n' '\0')
        
        # move (incremental) or delete (not incremental, (default)) old files
        if [ "${#old[@]}" -gt 0 ];then
            for file in "${old[@]}"; do
                fullfilepath="$MIRROR_DIR/$file"
                startwith=$(echo $file|cut -d'/' -f1)
                if [ -e "$fullfilepath" -a "x$startwith" == "x$first_dir" ]; then
                    if [ -n "$incremental" ];then
                        dn=$($DIRNAME "$fullfilepath")
                        bn=$($BASENAME "$fullfilepath")
                        mkdir -p "$OLD_DIR/$dn"
                        mv "$fullfilepath" "$OLD_DIR/$dn/$bn"
                    else
                        rm "$fullfilepath"
                    fi
                fi
            done
        fi
        if [ "${#old[@]}" -ne 0 ];then
            find "$MIRROR_DIR" -type f \( \( -iname '*.deb' -or -iname '*.udeb' \) -not -path '*/old/*' -not -path '*/var/*' -not -path '*/skel/*' -not -path '*/dists/*' \) -print |grep -v time-of-last-update|sed -rn "s@^$MIRROR_DIR/($first_dir)(.*)@\1\2@p;"|sort|uniq > $TMP_CURRENT
        fi
        ncurrent=$(cat $TMP_CURRENT|wc -l)
        nall=$(cat $TMP_ALL|wc -l)
        if [ -n "$nall" -a -n "$ncurrent" -a $ncurrent -gt 0 -a $nall -ge $ncurrent ]; then
            percent=$(echo $ncurrent*100/$nall|bc -q)
            make_link;
            OLD_PERCENT=$percent
            return $percent
        else
            return 0
        fi
    else
        return 0
    fi
}

if [ $execute ]; then
    echo Starting apt-mirror
    run
fi

getpids
calcule
printf "[%3s%%]\n" "$?"

if [ $interactive -a $execute ]; then
    while [ -n "$pid" ]; do
        sleep 1
        calcule
        printf "[%3s%%]\n" "$?"
        getpids
    done;
    printf "[%3s%%]\n" "100"
    if [ -f "$TMP_STATUS" ];then
        if grep 'apt-mirror is already running' "$TMP_STATUS"; then
            locked=1
        else
            locked=
        fi
    fi
fi

if [ -n "$locked" ];then
    echo 'Some errors ocurred, locking detected, if you are sure re-run with "-f" parameter'
    echo 'End apt-mirror'
    exit 1
fi

if [ $verify ]; then
    echo "Verifying mirror"
    find "$MIRROR_DIR" -type f -name InRelease \( -not -path '*/var/*' -not -path '*/skel/*' -not -path '*/old/*' \) | while read file; do
        valid=0
        for kring in $KEYRINGS; do
            if $GPG --keyring "$kring" --verify "$file" &> /dev/null ; then
                valid=1
                break
            fi
        done;
        if [ $valid -eq 0 ];then
            echo "Failed file verification $file"
        fi
    done;
    ret1=
    ret2=
    ret3=
    for t in $SIGFILES; do
        case $t in
            SHA1)
                SHA1SUM=$(which sha1sum)
                if [ -z "${SHA1SUM}" -o ! -f "$SHA1SUM" ];then
                    echo "sha1sum not found, install coreutils first!, skipping verify process"
                else
                    if [ -f "$VAR_DIR/$t" ]; then
                        ret1=$(cd "$MIRROR_DIR";LANG=C sha1sum --quiet -c "$VAR_DIR/$t" 2>/dev/null|sed -E 's/([^:]+):\s+FAILED/\1/g')
                    else
                        echo "skipping $t checking, sumfile not available"
                    fi
                fi
            ;;
            SHA256)
                SHA256SUM=$(which sha256sum)
                if [ -z "${SHA256SUM}" -o ! -f "$SHA256SUM" ];then
                    echo "sha256sum not found, install coreutils first!, skipping verify process"
                else
                    if [ -f "$VAR_DIR/$t" ]; then
                        ret2=$(cd "$MIRROR_DIR";LANG=C sha256sum --quiet -c "$VAR_DIR/$t" 2>/dev/null|sed -E 's/([^:]+):\s+FAILED/\1/g')
                    else
                        echo "skipping $t checking, sumfile not available"
                    fi
                fi
            ;;
            MD5)
                MD5SUM=$(which md5sum)
                if [ -z "${MD5SUM}" -o ! -f "$MD5SUM" ];then
                    echo "md5sum not found, install coreutils first!, skipping verify process"
                else
                    if [ -f "$VAR_DIR/$t" ]; then
                        ret3=$(cd "$MIRROR_DIR";LANG=C md5sum --quiet -c "$VAR_DIR/$t" 2>/dev/null|sed -E 's/([^:]+):\s+FAILED/\1/g')
                    else
                        echo "skipping $t checking, sumfile not available"
                    fi
                fi
            ;;
        esac
    done
    failed=$(printf "%s\n%s\n%s\n" "$ret1" "$ret2" "$ret3"|sort|uniq|xargs -n1)
    nfailed=$(echo $failed|wc -l)
    q=0
    if [ ! $retry_failed ];then
        while [ $q -eq 0 ]; do
            echo -n "$nfailed files failed verify process, [R|r]etry [S|s]how [C|c]ontinue ?"
            read x;
            case $x in
                s|S)
                    echo $failed
                ;;
                r|R)
                    q=1
                ;;
                c|C)
                    q=2
                ;;
            esac
        done
    fi
    if [ $q -eq 1 -o ! -z "$retry_failed" ];then
        if [ $(echo $ret1|wc -c) -gt 1 -o $(echo $ret2|wc -c) -gt 1  -o $(echo $ret3|wc -c) -gt 1 ];then
            echo "Retrying some packages"
            nretry=0
            for x in $ret1; do
                if [ -f "$MIRROR_DIR/$x" ];then
                    if [ -n "$incremental" ];then
                        mv "$MIRROR_DIR/$x" "$MIRROR_DIR/$x.failed"
                    else
                        rm "$MIRROR_DIR/$x"
                    fi
                    nretry=$(($nretry+1))
                fi
            done
            for x in $ret2; do
                if [ -f "$MIRROR_DIR/$x" ];then
                    if [ -n "$incremental" ];then
                        mv "$MIRROR_DIR/$x" "$MIRROR_DIR/$x.failed"
                    else
                        rm "$MIRROR_DIR/$x"
                    fi
                    nretry=$(($nretry+1))
                fi
            done
            for x in $ret3; do
                if [ -f "$MIRROR_DIR/$x" ];then
                    if [ -n "$incremental" ];then
                        mv "$MIRROR_DIR/$x" "$MIRROR_DIR/$x.failed"
                    else
                        rm "$MIRROR_DIR/$x"
                    fi
                    nretry=$(($nretry+1))
                fi
            done
            echo "$nretry files for redownload"
            if [ -f $TMP_CURRENT ]; then
                rm $TMP_CURRENT
            fi
            if [ -f $TMP_ALL ]; then
                rm $TMP_ALL
            fi
            exec bash $0 --config-file="$config_used"
        fi
    fi
fi
last_update="$(wget -q http://lliurex.net/$DISTRO/time-of-last-update -O -)"
if [ -n "$last_update" ]; then
    echo $last_update > "$MIRROR_DIR/time-of-last-update"
else
    echo "WARNING! Can't download time-of-last-update file"
fi
make_link
echo "End apt-mirror"
if [ -f $TMP_CURRENT ]; then
    rm $TMP_CURRENT
fi
if [ -f $TMP_ALL ]; then
    rm $TMP_ALL
fi
